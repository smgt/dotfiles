set autowrite
set nocompatible              " be iMproved, required
filetype plugin indent on    " required

call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'ervandew/supertab'
  Plug 'tomtom/tcomment_vim'

  " Snippets
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'

  " Git and file plugins
  Plug 'tpope/vim-fugitive'
  Plug 'gregsexton/gitv'
  Plug 'scrooloose/nerdtree'
  "Plug 'vim-syntastic/syntastic'

  " Ruby
  "Plug 'thoughtbot/vim-rspec'
  Plug 'vim-ruby/vim-ruby'
  "Plug 'tpope/vim-rbenv'
  "Plug 'tpope/vim-bundler'


  " Elixir
  "Plug 'elixir-lang/vim-elixir'

  " Docker
  Plug 'ekalinin/Dockerfile.vim'

  " JSON
  Plug 'elzr/vim-json'

  " Utility
  "Plug 'tpope/vim-projectionist'
  Plug 'jgdavey/tslime.vim'
  Plug 'dense-analysis/ale'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'vim-scripts/ZoomWin'
  Plug 'majutsushi/tagbar'
  Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --go-completer' }

  Plug 'junegunn/fzf.vim'

  " Go
  Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries', 'tags': '*' }
  Plug 'janko/vim-test'

  " Themes
  Plug 'liuchengxu/space-vim-dark'

  " Needs to be loaded at the end
  Plug 'sheerun/vim-polyglot'

" All of your Plugins must be added before the following line
call plug#end()            " required


set fileformat=unix
let mapleader=","

"set term=builtin_ansi
if !has('nvim')
  set term=screen-256color
endif

" 256 colors in terminal
set t_Co=256

" Show line number in front of each line
set number

" Show line and column number of the cursor position
set ruler


" Location of tags file
set tags=./.git/tags,./tags,tags;

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Don't create swp files
set nobackup
set nowritebackup
set noswapfile

" Tab completion
"set wildmode=list:longest,list:full
"set wildignore+=*.o,*.obj,.git,*.rbc,*.min.js,.rsync_cache

" Status bar
set laststatus=2
if has('statusline')
  set statusline=%<%f\
  set statusline+=%w%h%m%r
  set statusline+=%{fugitive#statusline()}
  set statusline+=\ [%{getcwd()}]
  set statusline+=%=%-14.(Line:\ %l\ of\ %L\ [%p%%]\ -\ Col:\ %c%V%)
endif

" Turn off visual bell
set visualbell t_vb=

map <Leader>p :Files<CR>
map <Leader>b :Buffers<CR>
map <Leader>l :Lines<CR>
map <Leader>t :Tags<CR>

" ZoomWin configuration
map <Leader>z :ZoomWin<CR>

" Taglist
map <Leader>o :Tagbar<CR>
let Tlist_Ctags_Cmd='ctags'

map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

autocmd FileType go set listchars=tab:\ \ ,trail:✖
let g:go_metalinter_autosave = 1
let g:go_fmt_command = 'goimports'
"let g:go_info_mode = 'gocode'
let g:go_list_autoclose = 0
let g:go_metalinter_autosave_enabled = ['govet', 'golint', 'errcheck']
let g:go_fmt_options = {
   \ 'goimports': '-local bitbucket.org/readly',
   \ 'gofmt': '-s',
   \ }
"let g:go_metalinter_command = "/home/simon/codez/golangci-lint/golangci-lint run --disable-all -E govet -E golint"
"let g:go_debug=['shell-commands']
let g:go_list_type = "quickfix"

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Highlight row when wider than 80 characters
" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" function s:setupWrapping()
"   set wrap
"   set wm=2
"   set textwidth=72
" endfunction

" function s:setupMarkup()
"   call s:setupWrapping()
"   map <buffer> <Leader>p :Mm <CR>
" endfunction

" make use real tabs
au FileType make set noexpandtab
"au FileType python set noexpandtab

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Guardfile,vagranfile,Vagrantfile,Gemfile,Rakefile,Thorfile,config.ru} set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
" au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
" map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
" map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
" cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Bubble single lines
" nmap <C-k> [e
" nmap <C-j> ]e

" Bubble multiple lines
vmap <C-k> [egv
vmap <C-j> ]egv

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Map keys to change tabs
noremap <C-p> :tabnext<CR>
noremap <C-o> :tabprev<CR>

" Use modeline overrides
set modeline
set modelines=10

set showtabline=1

" Default color scheme
let g:space_vim_dark_background = 234
colors space-vim-dark
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
hi LineNr ctermbg=NONE guibg=NONE

" Highlight the 81 character background
"set textwidth=80
"set colorcolumn=+1
"hi ColorColumn guibg=#403d3d

" Show special characters
set list
set listchars=tab:⇝\ ,trail:✖

" Include user's local vim config
"if filereadable(expand("~/.vimrc.local"))
"  source ~/.vimrc.local
"endif

" Remove trailing whitespace
" autocmd BufWritePre * :%s/\s\+$//e

" Populate airline special fonts
" let g:airline_powerline_fonts = 1

"map <Leader>rx :!"tmux new-window -t $_SNAME -n vim -d vim"

command! -nargs=1 Execute
      \ | execute ':execute '.<q-args>
      \ | execute ':redraw!'

" Run the current file with rspec
"map <Leader>rf :call VimuxRunCommand("clear; bundle exec rspec " . bufname("%") )<CR>
"map <Leader>rf :Execute "silent !tmxc test \"cd $(pwd);clear;bundle exec rspec " . bufname("%") . "\""<CR>

" Run rspec test closes to the cursor
"map <Leader>rl :call VimuxRunCommand("clear; bundle exec rspec " . bufname("%") . ":" . line("."))<CR>
"map <Leader>rl :Execute "silent !tmxc test \"cd $(pwd);clear;bundle exec rspec " . bufname("%") . ":" . line(".") ."\""<CR>

" bind K to grep word under cursor
nnoremap K :Rg "\b<C-R><C-W>\b"<CR>:cw<CR>

" tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
" http://sourceforge.net/mailarchive/forum.php?thread_name=AANLkTinkbdoZ8eNR1X2UobLTeww1jFrvfJxTMfKSq-L%2B%40mail.gmail.com&forum_name=tmux-users

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Slime
" let g:slime_target = "tmux"
" let g:slime_python_ipython = 1
" autocmd FileType ruby nnoremap <buffer> <Leader>s :execute "SlimeSend1 load('".expand('%:p')."')"<CR>

" Ale configuration
let g:ale_fixers = {
      \   'go': ['goimports'],
      \}
let g:ale_linters = {
      \ 'go': ['golint', 'govet', 'staticcheck']
      \}

" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1

autocmd FileType go set listchars=tab:\ \ ,trail:✖
"let g:go_auto_type_info = 1
let g:go_metalinter_autosave = 1
"let g:go_metalinter_enabled = ['deadcode', 'govet', 'typecheck']
"let g:go_metalinter_command='golangci-lint'
let g:go_metalinter_autosave_enabled=['golint', 'govet', 'typecheck']
"let g:go_info_mode = 'gocode'
let g:go_fmt_command = 'goimports'
let g:go_fmt_options = {
    \ 'goimports': '-local bitbucket.org/readly',
    \ 'gofmt': '-s',
    \ }


" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

let g:syntastic_go_checkers = ['golint', 'govet', 'golangci-lint']
let g:syntastic_go_gometalinter_args = ['--disable-all', '--enable=errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
"
" " If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" Run a given vim command on the results of alt from a given path.
" See usage below.
function! AltCommand(path, vim_command)
  let l:alternate = system("alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction

" Find the alternate file for the current path and open it
nnoremap <leader>. :w<cr>:call AltCommand(expand('%'), ':e')<cr>

let test#strategy = "tslime"

autocmd FileType go nmap <leader>t  <Plug>(go-test)
