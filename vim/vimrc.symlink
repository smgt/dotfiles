  set nocompatible              " be iMproved, required
  filetype off                  " required

  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " let Vundle manage Vundle, required
  Plugin 'gmarik/Vundle.vim'

  " The following are examples of different formats supported.
  " Keep Plugin commands between vundle#begin/end.
  " plugin on GitHub repo
  " Plugin 'ervandew/ag'
  Plugin 'rking/ag.vim'
  Plugin 'tpope/vim-surround'
  Plugin 'tpope/vim-unimpaired'
  Plugin 'tpope/vim-fugitive'
  Plugin 'godlygeek/tabular'
  Plugin 'scrooloose/syntastic'
  Plugin 'ervandew/supertab'
  Plugin 'gregsexton/gitv'
  Plugin 'tomtom/tcomment_vim'


  " plugin from http://vim-scripts.org/vim/scripts.html
  "Plugin 'L9'
  Plugin 'ZoomWin'
  "Plugin 'ShowMarks'
  Plugin 'taglist.vim'

  " Git plugin not hosted on GitHub
  Plugin 'git://git.wincent.com/command-t.git'
  " git repos on your local machine (i.e. when working on your own plugin)
  "Plugin 'file:///home/gmarik/path/to/plugin'
  " The sparkup vim script is in a subdirectory of this repo called vim.
  " Pass the path to set the runtimepath properly.
  "Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
  " Avoid a name conflict with L9
  "Plugin 'user/L9', {'name': 'newL9'}

  " All of your Plugins must be added before the following line
  call vundle#end()            " required
  filetype plugin indent on    " required
  " To ignore plugin indent changes, instead use:
  "filetype plugin on
  "
  " Brief help
  " :PluginList       - lists configured plugins
  " :PluginInstall    - installs plugins; append `!` to update or just
":PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set fileformat=unix
let mapleader=","

"set term=builtin_ansi
set term=screen-256color

" 256 colors in terminal
set t_Co=256

set nocompatible

" Show line number in front of each line
set number

" Show line and column number of the cursor position
set ruler

" Syntax highlighting
syntax on

" Location of tags file
set tags=./.git/tags,./tags,tags;

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab

" If php, use the php stuffs
"autocmd FileType php set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 autoindent smartindent

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Don't create swp files
set nobackup
set nowritebackup
set noswapfile

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.min.js,.rsync_cache

" Status bar
set laststatus=2
if has('statusline')
  set statusline=%<%f\
  set statusline+=%w%h%m%r
  set statusline+=%{fugitive#statusline()}
  set statusline+=\ [%{getcwd()}]
  set statusline+=%=%-14.(Line:\ %l\ of\ %L\ [%p%%]\ -\ Col:\ %c%V%)
endif

" Turn off visual bell
set visualbell t_vb=

" Command-T configuration
"let g:CommandTMaxHeight=30
map <Leader>p :CommandT<CR>

" ZoomWin configuration
map <Leader>z :ZoomWin<CR>


" Taglist
map <Leader>o :Tlist<CR>
let tlist_php_settings = 'php;c:class;f:function'
let Tlist_Ctags_Cmd='/usr/local/bin/ctags'

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Highlight row when wider than 80 characters
" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" function s:setupWrapping()
"   set wrap
"   set wm=2
"   set textwidth=72
" endfunction

" function s:setupMarkup()
"   call s:setupWrapping()
"   map <buffer> <Leader>p :Mm <CR>
" endfunction

" make use real tabs
au FileType make set noexpandtab
"au FileType python set noexpandtab

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Guardfile,vagranfile,Vagrantfile,Gemfile,Rakefile,Thorfile,config.ru} set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
" au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
" filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Bubble single lines
nmap <C-k> [e
nmap <C-j> ]e

" Bubble multiple lines
vmap <C-k> [egv
vmap <C-j> ]egv

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Map keys to change tabs
noremap <C-p> :tabnext<CR>
noremap <C-o> :tabprev<CR>

" Use modeline overrides
set modeline
set modelines=10

set showtabline=1

" Yank into OSX clipboard
"set clipboard=unnamed

" Default color scheme
"colors molokai2
colors Tomorrow-Night
"colors mustang
"set background=dark
"colorscheme solarized

" Gist settings
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

" Highlight the 81 character background
"set textwidth=80
"set colorcolumn=+1
"hi ColorColumn guibg=#403d3d

" Show special characters
set list
set listchars=tab:â–·\ ,trail:âœ–

" Include user's local vim config
"if filereadable(expand("~/.vimrc.local"))
"  source ~/.vimrc.local
"endif

" Remove trailing whitespace
" autocmd BufWritePre * :%s/\s\+$//e

" Show error list in Syntactic
let g:syntastic_auto_loc_list=1
let g:syntastic_error_symbol='ðŸ”¥'
let g:syntastic_warning_symbol='ðŸ’©'
