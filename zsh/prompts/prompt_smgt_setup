
# Echoes a username/host string when connected over SSH (empty otherwise)
ssh_info() {
  if [ -z $HOSTCOLOR ]; then
    HOSTCOLOR=11
  fi
  if [[ "$SSH_CONNECTION" != '' ]];then
    echo "%(!.%F{red}.%F{green})%n%f@%F{$HOSTCOLOR%}%m%f "
  fi
}

# Echoes information about Git repository status when inside a Git repository
git_info() {
  # Exit if not inside a Git repository
  ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  # Git branch/tag, or name-rev if on detached head
  local GIT_LOCATION=${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}

  local AHEAD="%{$fg[red]%}⇡NUM%{$reset_color%}"
  local BEHIND="%{$fg[cyan]%}⇣NUM%{$reset_color%}"
  local MERGING="%{$fg[magenta]%}⚡︎%{$reset_color%}"
  local UNTRACKED="%{$fg[red]%}●%{$reset_color%}"
  local MODIFIED="%{$fg[yellow]%}●%{$reset_color%}"
  local STAGED="%{$fg[green]%}●%{$reset_color%}"

  local -a DIVERGENCES
  local -a FLAGS

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    DIVERGENCES+=( "${AHEAD//NUM/$NUM_AHEAD}" )
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    DIVERGENCES+=( "${BEHIND//NUM/$NUM_BEHIND}" )
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    FLAGS+=( "$MERGING" )
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    FLAGS+=( "$UNTRACKED" )
  fi

  if ! git diff --quiet 2> /dev/null; then
    FLAGS+=( "$MODIFIED" )
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    FLAGS+=( "$STAGED" )
  fi

  local -a GIT_INFO
  GIT_INFO+=( "%F{#F1502F%} %{$reset_color%}%{${fg[cyan]}%}±" )
  [[ ${#DIVERGENCES[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)DIVERGENCES}" )
  [[ ${#FLAGS[@]} -ne 0 ]] && GIT_INFO+=( "${(j::)FLAGS}" )
  GIT_INFO+=( "%{${fg[cyan]}%}$GIT_LOCATION%{$reset_color%}" )
  echo "${(j: :)GIT_INFO}"
}

# Show nix symbol if we are in a nix shell
nix_info() {
  if [ -n "$IN_NIX_SHELL" ];then
    echo "%F{#7EBAE4%}󱄅 nix%{$reset_color%} "
  fi
}

# AWS profile
aws_info() {
  if [ -n "$AWS_PROFILE" ] || [ -n "$AWS_ENV" ];then
    local prompt_aws_env=${AWS_PROFILE:-$AWS_ENV}
    echo "%F{#FF9900%} ${prompt_aws_env}%{$reset_color%} "
  fi
}

rprompt_prefix() {
  if [ -n "$RPROMPT_PREFIX" ];then
    echo "$RPROMPT_PREFIX "
  fi
}

setopt prompt_subst

# Use ❯ as the non-root prompt character; # for root
# Change the prompt character color if the last command had a nonzero exit code
RPROMPT="\$(rprompt_prefix)\$(aws_info)\$(nix_info)\$(git_info)"
PS1="\$(ssh_info)%F{magenta}%B%~%b%u%f %(?.%F{magenta}.%F{red})%(!.#.❯)%f "

# vim: filetype=sh
